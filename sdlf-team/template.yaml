AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Resources to be created to manage a team

Parameters:
  pPipelineReference:
    Type: String
    Default: none
  pOrg:
    Description: Name of the organization owning the datalake
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pOrg}}"
  pDomain:
    Description: Data domain name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pDomain}}"
  pAnalyticsBucket:
    Description: The analytics bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/AnalyticsBucket}}"
  pCentralBucket:
    Description: The central bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/CentralBucket}}"
  pAthenaBucket:
    Description: S3 Athena bucket
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/AthenaBucket}}"
  pEnvironment:
    Description: Environment name
    Type: String
    Default: "{{resolve:ssm:/SDLF/Misc/pEnv}}"
  pArtifactsBucket:
    Description: The artifacts bucket used by CodeBuild and CodePipeline
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/ArtifactsBucket}}"
#  pSNSNotificationsEmail:
#    Description: Email address for SNS notifications
#    Type: String
#    Default: nobody@amazon.com
  pStageBucket:
    Description: The stage bucket for the solution
    Type: String
    Default: "{{resolve:ssm:/SDLF/S3/StageBucket}}"
  pTeamName:
    Description: Name of the team (all lowercase, no symbols or spaces)
    Type: String
    AllowedPattern: "[a-z0-9]{2,12}"
  pLakeFormationDataAccessRole:
    Type: String
    Default: "{{resolve:ssm:/SDLF/IAM/LakeFormationDataAccessRoleArn}}"
  pCloudWatchLogsRetentionInDays:
    Description: The number of days log events are kept in CloudWatch Logs
    Type: Number
    Default: 30
    AllowedValues:
      [
        1,
        3,
        5,
        7,
        14,
        30,
        60,
        90,
        120,
        150,
        180,
        365,
        400,
        545,
        731,
        1827,
        3653,
      ]
  # the ideal would be to fetch ssm:/SDLF/VPC/Enabled and not ask the user to set this variable to true manually.
  # however between AWS::SSM::Parameter::Value<String> not working in CloudFormation modules,
  # Fn::ImportValue not being accepted in CloudFormation modules template fragments,
  # {{resolve:}} being evaluated later than the Conditions block, options are limited.
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false
  # pVpcSecurityGroupIds and pVpcSubnetIds are passed explicitly (unlike in sdlf-cicd/template-cicd-sdlf-repositories.yaml for example)
  # due to Fn::ImportValue not being accepted in CloudFormation modules template fragments
  pVpcSecurityGroupIds:
    Description: VPC Security Groups Ids
    Type: String
    Default: ""
  pVpcSubnetIds:
    Description: VPC Subnet Ids
    Type: String
    Default: ""

Conditions:
  RunInVpc: !Equals [!Ref pEnableVpc, true]

Globals:
  Function:
    Runtime: python3.12
    Handler: lambda_function.lambda_handler
    KmsKeyArn: !GetAtt rKMSInfraKey.Arn
    VpcConfig: !If
      - RunInVpc
      - SecurityGroupIds: !Split [",", !Ref pVpcSecurityGroupIds]
        SubnetIds: !Split [",", !Ref pVpcSubnetIds]
      - !Ref "AWS::NoValue"

Resources:
  ######## KMS #########
  rKMSInfraKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F76
            reason: Full access is allowed to Key admin and some AWS services
    Properties:
      Description: !Sub SDLF ${pTeamName} Infrastructure KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: "2012-10-17"
        Id: !Sub sdlf-${pTeamName}-infra-key-policy
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Action: kms:*
            Resource: "*"
          - Sid: Allow CloudWatch alarms access
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service:
                - !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: Allow SNS access
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey*
            Resource: "*"
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref AWS::AccountId
                kms:ViaService: !Sub sns.${AWS::Region}.amazonaws.com

  rKMSInfraKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-infra-key
      TargetKeyId: !Ref rKMSInfraKey

  rKMSDataKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      Description: !Sub SDLF ${pTeamName} Data KMS Key
      EnableKeyRotation: True
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub sdlf-${pTeamName}-data-key-policy
        Statement:
          - Sid: Allow administration of the key
            Action: kms:*
            Effect: Allow
            Principal:
              AWS: [!Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"]
            Resource: "*"
          - Sid: Allow Lake Formation permissions
            Action:
              - kms:Encrypt*
              - kms:Decrypt*
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:Describe*
            Effect: Allow
            Principal:
              AWS: !Ref pLakeFormationDataAccessRole
            Resource: "*"

  rKMSDataKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AliasName: !Sub alias/sdlf-${pTeamName}-kms-data-key
      TargetKeyId: !Ref rKMSDataKey

  rEventBus:
    Type: AWS::Events::EventBus
    Properties:
        Name: !Sub sdlf-${pTeamName}

  rForwardEventBusTriggerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: sdlf-cicd-events-trigger
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: events:PutEvents
                Resource:
                  - !GetAtt rEventBus.Arn

  rForwardEventBusRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - prefix: aws.
        account:
          - !Ref AWS::AccountId
        region:
          - !Ref AWS::Region
      Targets:
        - Arn: !GetAtt rEventBus.Arn
          RoleArn: !GetAtt rForwardEventBusTriggerRole.Arn
          Id: default-to-sdlf-team

  rScheduleGroup:
    Type: AWS::Scheduler::ScheduleGroup
    Properties:
      Name: !Sub sdlf-${pTeamName}

  rGlueSecurityConfiguration:
    Type: AWS::Glue::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-glue-security-config
      EncryptionConfiguration:
        CloudWatchEncryption:
          CloudWatchEncryptionMode: SSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        JobBookmarksEncryption:
          JobBookmarksEncryptionMode: CSE-KMS
          KmsKeyArn: !GetAtt rKMSInfraKey.Arn
        S3Encryptions:
          - S3EncryptionMode: SSE-KMS
            KmsKeyArn: !GetAtt rKMSDataKey.Arn

  rEMRSecurityConfiguration:
    Type: AWS::EMR::SecurityConfiguration
    Properties:
      Name: !Sub sdlf-${pTeamName}-emr-security-config
      SecurityConfiguration: !Sub |
        {
          "EncryptionConfiguration": {
            "EnableInTransitEncryption" : false,
            "EnableAtRestEncryption" : true,
            "AtRestEncryptionConfiguration" : {
              "S3EncryptionConfiguration" : {
                "EncryptionMode" : "SSE-KMS",
                "AwsKmsKey": "${rKMSDataKey}"
              },
              "LocalDiskEncryptionConfiguration" : {
                "EncryptionKeyProviderType" : "AwsKms",
                "AwsKmsKey" : "${rKMSDataKey}",
                "EnableEbsEncryption" : true
              }
            }
          },
          "InstanceMetadataServiceConfiguration":{
            "MinimumInstanceMetadataServiceVersion": 2,
            "HttpPutResponseHopLimit": 1
          }
        }

  ######## SSM #########
  rKMSInfraKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/InfraKeyId
      Type: String
      Value: !GetAtt rKMSInfraKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS infrastructure key
  rKMSDataKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/KMS/${pTeamName}/DataKeyId
      Type: String
      Value: !GetAtt rKMSDataKey.Arn
      Description: !Sub Arn of the ${pTeamName} KMS data key

  rEventBusSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/EventBridge/${pTeamName}/EventBusName
      Type: String
      Value: !Ref rEventBus
      Description: !Sub Name of the ${pTeamName} event bus

  rScheduleGroupSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/EventBridge/${pTeamName}/ScheduleGroupName
      Type: String
      Value: !Ref rScheduleGroup
      Description: !Sub Name of the ${pTeamName} schedule group

  rGlueSecurityConfigurationSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Glue/${pTeamName}/SecurityConfigurationId
      Type: String
      Value: !Sub sdlf-${pTeamName}-glue-security-config # unfortunately AWS::Glue::SecurityConfiguration doesn't provide any return value
      Description: !Sub Name of the ${pTeamName} Glue security configuration
  #### END KMS STACK

  ######## IAM #########
  rTeamIAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W13
            reason: |-
              Condition applied to restrict access, and the KMS keys do not exist at this stage
              The other actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf/${pTeamName}/ # keep this path for the team's permissions boundary policy only
      Description: Team Permissions Boundary IAM policy. Add/remove permissions based on company policy and associate it to federated role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowConsoleListBuckets
            Effect: Allow
            Action:
              - s3:GetBucketLocation
              - s3:ListAllMyBuckets
            Resource: !Sub arn:${AWS::Partition}:s3:::*
          - Sid: AllowTeamBucketList
            Effect: Allow
            Action:
              - s3:ListBucket
            Resource:
              [
                !Sub "arn:${AWS::Partition}:s3:::${pArtifactsBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pCentralBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pStageBucket}",
                !Sub "arn:${AWS::Partition}:s3:::${pAnalyticsBucket}",
              ]
          - Sid: AllowTeamPrefixActions
            Effect: Allow
            Action:
              - s3:DeleteObject
              - s3:GetObject
              - s3:PutObject
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${pArtifactsBucket}/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/*
              - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/*
          - Sid: AllowFullCodeCommitOnTeamRepositories
            Effect: Allow
            Action:
              - codecommit:AssociateApprovalRuleTemplateWithRepository
              - codecommit:BatchAssociateApprovalRuleTemplateWithRepositories
              - codecommit:BatchDisassociateApprovalRuleTemplateFromRepositories
              - codecommit:BatchGet*
              - codecommit:BatchDescribe*
              - codecommit:Create*
              - codecommit:DeleteBranch
              - codecommit:DeleteFile
              - codecommit:Describe*
              - codecommit:DisassociateApprovalRuleTemplateFromRepository
              - codecommit:EvaluatePullRequestApprovalRules
              - codecommit:Get*
              - codecommit:List*
              - codecommit:Merge*
              - codecommit:OverridePullRequestApprovalRules
              - codecommit:Put*
              - codecommit:Post*
              - codecommit:TagResource
              - codecommit:Test*
              - codecommit:UntagResource
              - codecommit:Update*
              - codecommit:GitPull
              - codecommit:GitPush
            Resource:
              - !Sub arn:${AWS::Partition}:codecommit:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Sid: AllowTeamKMSDataKeyUsage
            Effect: Allow
            Action:
              - kms:CreateGrant
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource:
              - !GetAtt rKMSDataKey.Arn
              - !GetAtt rKMSInfraKey.Arn
          - Sid: AllowSSMGet
            Effect: Allow
            Action:
              - ssm:GetParameter
              - ssm:GetParameters
            Resource: !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/*
          - Sid: AllowOctagonDynamoAccess
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
              - dynamodb:DeleteItem
              - dynamodb:DescribeTable
              - dynamodb:GetItem
              - dynamodb:GetRecords
              - dynamodb:PutItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:UpdateItem
            Resource:
              - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-*
          - Sid: AllowSQSManagement
            Effect: Allow
            Action:
              - sqs:DeleteMessage
              - sqs:DeleteMessageBatch
              - sqs:GetQueueAttributes
              - sqs:GetQueueUrl
              - sqs:ListQueues
              - sqs:ListDeadLetterSourceQueues
              - sqs:ListQueueTags
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:SendMessageBatch
            Resource:
              - !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - states:StartExecution
            Resource:
              - !Sub arn:${AWS::Partition}:states:${AWS::Region}:${AWS::AccountId}:stateMachine:sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource:
              - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-${pTeamName}/sdlf-*
            Condition:
              StringEquals:
                "iam:PassedToService":
                  - glue.amazonaws.com
          - Effect: Allow
            Action:
              - glue:StartCrawler
              - glue:GetCrawler
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:crawler/sdlf-${pTeamName}-*
          - Effect: Allow
            Action:
              - glue:GetTable
              - glue:GetJobRun
              - glue:GetJobRuns
              - glue:StartJobRun
              - glue:StartDataQualityRuleRecommendationRun
              - glue:GetDataQualityRuleRecommendationRun
              - glue:StartDataQualityRulesetEvaluationRun
              - glue:GetDataQualityRulesetEvaluationRun
            Resource:
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${pOrg}_${pDomain}_${pEnvironment}_${pTeamName}_*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:job/${pOrg}-${pDomain}-${pEnvironment}-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:dataQualityRuleset/* # glue:StartDataQualityRuleRecommendationRun requires dataQualityRuleset/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
            Resource: !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*
          - Sid: AllowCloudWatchLogsReadOnlyAccess
            Effect: Allow
            Action:
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:GetLogEvents
              - logs:PutLogEvents
            Resource:
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/sdlf-${pTeamName}-*
              - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/jobs/sdlf-${pTeamName}-*
          - Sid: AllowCloudFormationReadOnlyAccess
            Effect: Allow
            Action:
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
              - cloudformation:DescribeStackResource
              - cloudformation:DescribeStackResources
            Resource:
              - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack:sdlf-${pTeamName}:*
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource:
              - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:sdlf-${pTeamName}-*
          - !If
            - RunInVpc
            - Effect: Allow
              Action:
                - ec2:CreateNetworkInterface # W13 condition applied
                - ec2:DescribeNetworkInterfaces # W13 exception
                - ec2:DeleteNetworkInterface # W13 condition applied
                - ec2:AssignPrivateIpAddresses # W13 condition applied
                - ec2:UnassignPrivateIpAddresses # W13 condition applied
              Resource:
                - "*"
              Condition:
                ArnEqualsIfExists:
                  "ec2:Vpc":
                    - !Sub "arn:${AWS::Partition}:ec2:${AWS::Region}:${AWS::AccountId}:vpc/{{resolve:ssm:/SDLF/VPC/VpcId}}"
            - !Ref "AWS::NoValue"

  rDatalakeCrawlerRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: The actions with "*" are all ones that only support the all resources wildcard
    Properties:
      Path: !Sub /sdlf-${pTeamName}/
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - glue.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSGlueServiceRole
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-glue-crawler
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:CreateBucket
                Resource: !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*/*
                  - !Sub arn:${AWS::Partition}:s3:::*/*aws-glue-*/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::crawler-public*
                  - !Sub arn:${AWS::Partition}:s3:::aws-glue-*
              - Effect: Allow
                Action:
                  - s3:ListObjectsV2
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                  - s3:PutObject
                  - s3:PutObjectVersion
                Resource:
                  - !Sub arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/*
                  - !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/*
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                  - kms:Encrypt
                  - kms:Decrypt
                  - kms:ReEncrypt*
                  - kms:GenerateDataKey*
                  - kms:CreateGrant
                Resource:
                  - !GetAtt rKMSInfraKey.Arn
                  - !GetAtt rKMSDataKey.Arn
                  - "{{resolve:ssm:/SDLF/KMS/KeyArn}}"
              - Effect: Allow
                Action:
                  - lakeformation:GetDataAccess # W11 exception
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:AssociateKmsKey
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws-glue/crawlers-role/sdlf-${pTeamName}/*

  ####### SSM #######
  rTeamIAMManagedPolicySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/TeamPermissionsBoundary
      Type: String
      Value: !Ref rTeamIAMManagedPolicy
      Description: The permissions boundary IAM Managed policy for the team
  rDatalakeCrawlerRoleArnSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/IAM/${pTeamName}/CrawlerRoleArn
      Type: String
      Value: !GetAtt rDatalakeCrawlerRole.Arn
      Description: The ARN of the Crawler role

  ######## SNS #########
  rSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub sdlf-${pTeamName}-notifications
      KmsMasterKeyId: !GetAtt rKMSInfraKey.Arn

  rSNSTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: !Sub sdlf-${pTeamName}-notifications
        Version: "2012-10-17"
        Statement:
          - Sid: !Sub sdlf-${pTeamName}-notifications
            Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - events.amazonaws.com
            Action: sns:Publish
            Resource: !Ref rSNSTopic
      Topics:
        - !Ref rSNSTopic

  rDatasetsDynamodbLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rDatasetsDynamodbLambda}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !GetAtt rKMSInfraKey.Arn

  rDatasetsDynamodbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-dynamodb-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DeleteLogGroup
                  - logs:TagLogGroup
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-datasets-dynamodb
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-datasets-dynamodb:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Pipelines/${pTeamName}
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Datasets/${pTeamName}

  rDatasetsDynamodbLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} datasets
      FunctionName: !Sub sdlf-${pTeamName}-datasets-dynamodb
      MemorySize: 192
      Role: !GetAtt rDatasetsDynamodbLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      CodeUri: ./lambda/datasets-dynamodb/src

  rPermissionForDatasetsEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rDatasetsDynamodbLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rDatasetsDynamodbTriggerEventRule.Arn

  rDatasetsDynamodbTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run Datasets DynamoDB update"
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        resources:
          - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-datasets-${pEnvironment}
        detail:
          stack-id:
            - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-datasets-${pEnvironment}
          status-details:
            status:
            - CREATE_COMPLETE
            - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt rDatasetsDynamodbLambda.Arn
          Id: !Sub sdlf-${rDatasetsDynamodbLambda}-trigger

  rPipelinesDynamodbLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rPipelinesDynamodbLambda}
      RetentionInDays: !Ref pCloudWatchLogsRetentionInDays
      KmsKeyId: !GetAtt rKMSInfraKey.Arn

  rPipelinesDynamodbLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: !Sub sdlf-${pTeamName}-dynamodb-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:UpdateItem
                Resource:
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Pipelines-${pEnvironment}
                  - !Sub arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/octagon-Datasets-${pEnvironment}
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DeleteLogGroup
                  - logs:TagLogGroup
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-pipelines-dynamodb
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-${pTeamName}-pipelines-dynamodb:*
              - Effect: Allow
                Action:
                  - cloudwatch:DeleteAlarms
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:PutMetricData
                  - cloudwatch:SetAlarmState
                Resource:
                  - !Sub arn:${AWS::Partition}:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:sdlf-${pTeamName}-*
              - Effect: Allow
                Action:
                  - ssm:GetParametersByPath
                Resource:
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Pipelines/${pTeamName}
                  - !Sub arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/SDLF/Datasets/${pTeamName}

  rPipelinesDynamodbLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: !Sub Creates/updates DynamoDB entries for ${pTeamName} pipelines
      FunctionName: !Sub sdlf-${pTeamName}-pipelines-dynamodb
      MemorySize: 192
      Role: !GetAtt rPipelinesDynamodbLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          TEAM_NAME: !Ref pTeamName
          ENVIRONMENT: !Ref pEnvironment
      CodeUri: ./lambda/pipelines-dynamodb/src

  rPermissionForPipelinesEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rPipelinesDynamodbLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rPipelinesDynamodbTriggerEventRule.Arn

  rPipelinesDynamodbTriggerEventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: "Run Pipelines DynamoDB update"
      EventPattern:
        source:
          - aws.cloudformation
        detail-type:
          - CloudFormation Stack Status Change
        resources:
          - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-pipelines-${pEnvironment}
        detail:
          stack-id:
            - prefix: !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/sdlf-${pTeamName}-pipelines-${pEnvironment}
          status-details:
            status:
            - CREATE_COMPLETE
            - UPDATE_COMPLETE
      Targets:
        - Arn: !GetAtt rPipelinesDynamodbLambda.Arn
          Id: !Sub sdlf-${rPipelinesDynamodbLambda}-trigger

  ######## SSM #########
  rSNSTopicSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/SNS/${pTeamName}/Notifications
      Type: String
      Value: !Ref rSNSTopic
      Description: The ARN of the team-specific SNS Topic

  ######## LAKEFORMATION PERMISSIONS #########
  rCentralTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pCentralBucket}/${pTeamName}/

  rStagePreTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/pre-stage/${pTeamName}/

  rStagePostTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pStageBucket}/post-stage/${pTeamName}/

  rAnalyticsTeamLakeFormationPermissions:
    Type: AWS::LakeFormation::Permissions
    Properties:
      DataLakePrincipal:
        DataLakePrincipalIdentifier: !GetAtt rDatalakeCrawlerRole.Arn
      Permissions:
        - DATA_LOCATION_ACCESS
      Resource:
        DataLocationResource:
          S3Resource: !Sub arn:${AWS::Partition}:s3:::${pAnalyticsBucket}/${pTeamName}/

  rTeamLakeFormationTag:
    Type: AWS::LakeFormation::Tag
    Properties:
      CatalogId: !Ref AWS::AccountId
      # sdlf:team as key and team names as values would be best but impossible here
      TagKey: !Sub "sdlf:team:${pTeamName}"
      TagValues:
        - !Sub ${pTeamName}

  rTeamLakeFormationTagPermissions: # allows associating this lf-tag to datasets in sdlf-dataset
      Type: AWS::LakeFormation::PrincipalPermissions
      Properties:
        Principal:
          DataLakePrincipalIdentifier: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-cicd-team-${pTeamName}
        Resource:
          LFTag:
            CatalogId: !Ref AWS::AccountId
            TagKey: !Ref rTeamLakeFormationTag
            TagValues:
              - !Sub ${pTeamName}
        Permissions:
          - ASSOCIATE
        PermissionsWithGrantOption: []

  rTeamLakeFormationTagTablesPermissions: # allows sdlf pipelines to grant permissions on tables associated with this lf-tag
    Type: AWS::LakeFormation::PrincipalPermissions
    Properties:
      Principal:
        DataLakePrincipalIdentifier: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/sdlf-cicd-team-${pTeamName}
      Resource:
        LFTagPolicy:
          CatalogId: !Ref AWS::AccountId
          ResourceType: TABLE
          Expression:
            - TagKey: !Ref rTeamLakeFormationTag
              TagValues:
                - !Sub ${pTeamName}
      Permissions:
        - ALL
      PermissionsWithGrantOption:
        - ALL

  rAthenaWorkgroup:
    Type: AWS::Athena::WorkGroup
    Properties:
      Description: !Sub Athena workgroup for team ${pTeamName}
      Name: !Sub sdlf-${pTeamName}
      State: ENABLED
      WorkGroupConfiguration:
        EnforceWorkGroupConfiguration: true
        EngineVersion:
          SelectedEngineVersion: Athena engine version 3
          EffectiveEngineVersion: Athena engine version 3
        PublishCloudWatchMetricsEnabled: true
        ResultConfiguration:
          EncryptionConfiguration:
            EncryptionOption: SSE_KMS
            KmsKey: !GetAtt rKMSDataKey.Arn
          OutputLocation: !Sub s3://${pAthenaBucket}/${pTeamName}/

  rAthenaWorkgroupSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub /SDLF/Athena/${pTeamName}/WorkgroupName
      Type: String
      Value: !Ref rAthenaWorkgroup
      Description: The name of the Athena workgroup

Outputs:
  oPipelineReference:
    Description: CodePipeline reference this stack has been deployed with
    Value: !Ref pPipelineReference
