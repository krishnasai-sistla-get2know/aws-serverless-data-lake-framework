AWSTemplateFormatVersion: 2010-09-09
Description: Prerequisites for the rest of SDLF to be deployed/used

Parameters:
  pCustomBucketPrefix:
    Description: S3 Bucket Prefix if different from default. Must be a valid S3 Bucket name
    Type: String
    Default: sdlf
  pDomainAccounts:
    Description: List of AWS account ids bootstrapped with SDLF domain roles
    Type: CommaDelimitedList
  pEnableVpc:
    Description: Deploy SDLF resources in a VPC
    Type: String
    Default: false

Conditions:
  UseCustomBucketPrefix: !Not [!Equals [!Ref pCustomBucketPrefix, sdlf]]
  RunInVpc: !Equals [!Ref pEnableVpc, true]
  GovCloudPartition: !Equals
    - !Sub ${AWS::Partition}
    - aws-us-gov

Resources:
  ######## OPTIONAL SDLF FEATURES #########
  # when enabling VPC support, /SDLF/VPC/VpcId, /SDLF/VPC/SecurityGroupIds and /SDLF/VPC/SubnetIds are required too (see Outputs section)
  # both for the devops account and child accounts.
  rVpcFeatureSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/VPC/Enabled
      Type: String
      Value: !Ref pEnableVpc
      Description: Deploy SDLF resources in a VPC

  rBuildLambdaLayersFeatureSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/LambdaLayerBuilder/Enabled
      Type: String
      Value: false
      Description: Add Lambda layer builder infrastructure and pipeline stages

  rGlueJobDeployerFeatureSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/GlueJobDeployer/Enabled
      Type: String
      Value: false
      Description: Add Glue job deployer infrastructure and pipeline stages

  rMonitoringFeatureSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/Monitoring/Enabled
      Type: String
      Value: false
      Description: Build sdlf-monitoring cloudformation module as part of domain pipelines

  ######## KMS #########
  rKMSKey:
    Type: AWS::KMS::Key
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3042
    Properties:
      Description: SDLF KMS key for encryption of CodePipeline artifacts
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: "*"
          - Sid: Allow logs access
            Effect: Allow
            Principal:
              Service: !Sub logs.${AWS::Region}.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: CrossAccount Pipelines
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-devops-crossaccount-pipeline"
                  - inner: !Join
                    - ":role/sdlf-cicd-devops-crossaccount-pipeline,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-devops-crossaccount-pipeline"
                  - inner: !Join
                    - ":role/sdlf-cicd-devops-crossaccount-pipeline,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:List*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: CrossAccount Domain Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-domain"
                  - inner: !Join
                    - ":role/sdlf-cicd-domain,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-domain"
                  - inner: !Join
                    - ":role/sdlf-cicd-domain,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:List*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: CrossAccount Team Role Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team"
                  - inner: !Join
                    - ":role/sdlf-cicd-team,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team"
                  - inner: !Join
                    - ":role/sdlf-cicd-team,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:List*
              - kms:ReEncrypt*
            Resource: "*"
          - Sid: CrossAccount Module Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-cfn-modules"
                  - inner: !Join
                    - ":role/sdlf-cicd-cfn-modules,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-cfn-modules"
                  - inner: !Join
                    - ":role/sdlf-cicd-cfn-modules,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - kms:Decrypt
              - kms:Describe*
              - kms:Encrypt
              - kms:GenerateDataKey*
              - kms:List*
              - kms:ReEncrypt*
            Resource: "*"

  rKMSKeyAlias:
    Type: AWS::KMS::Alias
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      AliasName: alias/sdlf-cicd-kms-key
      TargetKeyId: !Ref rKMSKey

  rKMSKeySsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/KMS/CICDKeyId
      Type: String
      Value: !GetAtt rKMSKey.Arn
      Description: CICD KMS key

  ######## S3 #########
  ####### Access Logging Bucket ######
  rS3AccessLogsBucket:
    Type: AWS::S3::Bucket
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: Access logs bucket should not have logging enabled https://docs.aws.amazon.com/AmazonS3/latest/userguide/enable-server-access-logging.html
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-devops-s3logs",
          !Sub "sdlf-${AWS::Region}-${AWS::AccountId}-devops-s3logs",
        ]
      LifecycleConfiguration:
        Rules:
          - Id: InfrequentAccess
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
          - Id: DeepArchive
            Status: Enabled
            Transitions:
              - TransitionInDays: 60
                StorageClass: DEEP_ARCHIVE
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rS3AccessLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref rS3AccessLogsBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:PutObject
            Effect: Allow
            Principal:
              Service: logging.s3.amazonaws.com
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}/*
              - !Sub arn:${AWS::Partition}:s3:::${rS3AccessLogsBucket}
            Condition:
              ArnLike:
                "aws:SourceArn":
                  !If [
                    UseCustomBucketPrefix,
                    !Sub "arn:${AWS::Partition}:s3:::${pCustomBucketPrefix}*",
                    !Sub "arn:${AWS::Partition}:s3:::sdlf-${AWS::Region}-${AWS::AccountId}*",
                  ]
              StringEquals:
                "aws:SourceAccount": !Sub ${AWS::AccountId}

  rArtifactsBucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Properties:
      BucketName:
        !If [
          UseCustomBucketPrefix,
          !Sub "${pCustomBucketPrefix}-cicd-cfn-artifacts",
          !Sub "sdlf-${AWS::Region}-${AWS::AccountId}-cicd-cfn-artifacts",
        ]
      LoggingConfiguration:
        DestinationBucketName: !Ref rS3AccessLogsBucket
        LogFilePrefix:
          !If [
            UseCustomBucketPrefix,
            !Ref pCustomBucketPrefix,
            !Sub "sdlf-${AWS::Region}-${AWS::AccountId}",
          ]
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: True
            ServerSideEncryptionByDefault:
              KMSMasterKeyID: !Ref rKMSKey
              SSEAlgorithm: aws:kms
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True

  rArtifactsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Metadata:
      cfn-lint:
        config:
          ignore_checks:
            - I3042
      cfn_nag:
        rules_to_suppress:
          - id: F16
            reason: Principal is checked through the aws:PrincipalArn condition as the roles do not exist yet
    Properties:
      Bucket: !Ref rArtifactsBucket
      PolicyDocument:
        Statement:
          - Sid: EnforceTlsRequests
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*
            Condition:
              Bool:
                aws:SecureTransport: False
              NumericLessThan:
                s3:TlsVersion: "1.2"
          - Sid: CrossAccount Pipelines
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-devops-crossaccount-pipeline"
                  - inner: !Join
                    - ":role/sdlf-cicd-devops-crossaccount-pipeline,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-devops-crossaccount-pipeline"
                  - inner: !Join
                    - ":role/sdlf-cicd-devops-crossaccount-pipeline,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*
          - Sid: CrossAccount Domain Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-domain"
                  - inner: !Join
                    - ":role/sdlf-cicd-domain,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-domain"
                  - inner: !Join
                    - ":role/sdlf-cicd-domain,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*
          - Sid: CrossAccount Team Role Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team"
                  - inner: !Join
                    - ":role/sdlf-cicd-team,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team"
                  - inner: !Join
                    - ":role/sdlf-cicd-team,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*
          - Sid: CrossAccount Team Cfn
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*
            Condition:
              "ArnLike": !If
                - GovCloudPartition
                - "aws:PrincipalArn": !Split
                  - ","
                  - !Sub
                    - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team-*"
                    - inner: !Join
                      - ":role/sdlf-cicd-team-*,arn:aws-us-gov:iam::"
                      - Ref: "pDomainAccounts"
                - "aws:PrincipalArn": !Split
                  - ","
                  - !Sub
                    - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-team-*"
                    - inner: !Join
                      - ":role/sdlf-cicd-team-*,arn:aws:iam::"
                      - Ref: "pDomainAccounts"
          - Sid: CrossAccount Module Cfn
            Effect: Allow
            Principal: !If
              - GovCloudPartition
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-cfn-modules"
                  - inner: !Join
                    - ":role/sdlf-cicd-cfn-modules,arn:aws-us-gov:iam::"
                    - Ref: "pDomainAccounts"
              - AWS: !Split
                - ","
                - !Sub
                  - "arn:${AWS::Partition}:iam::${inner}:role/sdlf-cicd-cfn-modules"
                  - inner: !Join
                    - ":role/sdlf-cicd-cfn-modules,arn:aws:iam::"
                    - Ref: "pDomainAccounts"
            Action:
              - s3:GetObject*
              - s3:GetBucket*
              - s3:List*
              - s3:DeleteObject*
              - s3:PutObject*
              - s3:Abort*
            Resource:
              - !GetAtt rArtifactsBucket.Arn
              - !Sub ${rArtifactsBucket.Arn}/*

  rArtifactsBucketSsm:
    Type: AWS::SSM::Parameter
    Properties:
      Name: /SDLF/S3/DevOpsArtifactsBucket
      Type: String
      Value: !Ref rArtifactsBucket
      Description: S3 DevOps Artifacts Bucket

  rCodePipelineFirstRunStopperLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Sub /aws/lambda/${rCodePipelineFirstRunStopperLambda}
      RetentionInDays: 1
      KmsKeyId: !GetAtt rKMSKey.Arn

  rCodePipelineFirstRunStopperLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !If
          - RunInVpc
          - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
          - !Ref "AWS::NoValue"
      Policies:
        - PolicyName: sdlf-codepipeline-stopper-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:DescribeLogGroups
                  - logs:DeleteLogGroup
                  - logs:TagLogGroup
                  - logs:PutRetentionPolicy
                  - logs:DeleteRetentionPolicy
                  - logs:DescribeLogStreams
                  - logs:CreateLogStream
                  - logs:DeleteLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-codepipeline-stopper
                  - !Sub arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sdlf-codepipeline-stopper:*
              - Effect: Allow
                Action:
                  - codepipeline:StopPipelineExecution
                Resource:
                  - !Sub arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-cicd-*

  rCodePipelineFirstRunStopperLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sdlf-codepipeline-stopper
      Description: Stops CodePipeline automatic first run
      Runtime: python3.12
      Handler: index.lambda_handler
      KmsKeyArn: !GetAtt rKMSKey.Arn
      MemorySize: 128
      Role: !GetAtt rCodePipelineFirstRunStopperLambdaRole.Arn
      Timeout: 150
      Code:
        ZipFile: |
          import logging
          import os

          import boto3

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          codepipeline_endpoint_url = "https://codepipeline." + os.getenv("AWS_REGION") + ".amazonaws.com"
          codepipeline = boto3.client("codepipeline", endpoint_url=codepipeline_endpoint_url)


          def lambda_handler(event, context):
              try:
                  # extract pipeline name and execution id from the source event
                  detail = event.get("detail", {})
                  pipeline = detail.get("pipeline", {})
                  pipeline_execution = detail.get("execution-id", {})

                  if pipeline and pipeline_execution:
                      codepipeline.stop_pipeline_execution(pipelineName=pipeline, pipelineExecutionId=pipeline_execution)
                      logger.info("Stopped pipeline: %s, execution %s", pipeline, pipeline_execution)
                  else:
                      logger.info("Pipeline name or execution id not found in the source event")
              except Exception as e:
                  message = "Function exception: " + str(e)
                  logger.info(message)
                  raise

              return {"statusCode": 200, "body": "Pipeline execution stopped successfully"}

  rPermissionForCodePipelineFirstRunStopperEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref rCodePipelineFirstRunStopperLambda
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt rCodePipelineFirstRunStopperTriggerRule.Arn

  rCodePipelineFirstRunStopperTriggerRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      EventPattern:
        source:
          - aws.codepipeline
        detail-type:
          - CodePipeline Pipeline Execution State Change
        resources:
          - prefix: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-cicd-sdlf-pipelines-" # stop rMain CodePipeline
          - prefix: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-cicd-domain-" # stop rDomain CodePipeline
          - prefix: !Sub "arn:${AWS::Partition}:codepipeline:${AWS::Region}:${AWS::AccountId}:sdlf-cicd-teams-" # stop rTeam CodePipeline
        detail:
          state:
            - STARTED
          execution-trigger:
            trigger-type:
              - CreatePipeline
      Targets:
        - Arn: !GetAtt rCodePipelineFirstRunStopperLambda.Arn
          Id: !Sub sdlf-${rCodePipelineFirstRunStopperLambda}-trigger


Outputs:
  # workaround {{resolve:ssm:}} not returning an array that can be used directly in VpcConfig blocks
  oVpcFeatureSecurityGroupIds:
    Description: List of security group ids that will be attached to Lambda functions and CodeBuild projects
    Value: !If
      - RunInVpc
      - "{{resolve:ssm:/SDLF/VPC/SecurityGroupIds}}"
      - "-"
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "vpc-security-groups"]]

  oVpcFeatureSubnetIds:
    Description: List of subnet ids that will be attached to Lambda functions and CodeBuild projects
    Value: !If
      - RunInVpc
      - "{{resolve:ssm:/SDLF/VPC/SubnetIds}}"
      - "-"
    Export:
      Name: !Join ["-", [!Ref "AWS::StackName", "vpc-subnets"]]
